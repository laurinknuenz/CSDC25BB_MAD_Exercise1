/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien

import kotlin.random.Random

class App {
    // Game logic for a number guessing game
    private var userWon = false
    fun playNumberGame(digitsToGuess: Int = 4) {
        val numberToGuess = generateRandomNonRepeatingNumber(digitsToGuess)
        while (true) {
            print("Take your guess: ")
            val userGuess = readln().toInt()
            val guessingResult = checkUserInputAgainstGeneratedNumber(userGuess, numberToGuess)
            if (userWon) {
                print(guessingResult)
                print(" -> User wins!")
                break
            }
            println(guessingResult)
        }
    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        if (length < 1 || length > 9) {
            throw IllegalArgumentException()
        }
        val numbersList = mutableListOf(1, 2, 3, 4, 5, 6, 7, 8, 9)
        var randomNumberString = ""
        for (count in 1..length) {
            val randomElement = numbersList[Random.nextInt(numbersList.size)]
            numbersList.remove(randomElement)
            randomNumberString += randomElement.toString()
        }
        randomNumberString.toInt()
    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult =
        { input, generatedNumber ->
            val inputString = input.toString()
            val genNumberString = generatedNumber.toString()
            if (inputString.length != genNumberString.length) throw IllegalArgumentException()

            var digitsRight = 0
            var positionsRight = 0
            val foundNumbers = mutableListOf<Char>()

            for (indexInput in inputString.indices) {
                for (indexGenNumber in genNumberString.indices) {
                    if (inputString[indexInput] == genNumberString[indexGenNumber]) {
                        if (!foundNumbers.contains(inputString[indexInput])) digitsRight++
                        if (indexGenNumber == indexInput) positionsRight++
                        foundNumbers.add(genNumberString[indexGenNumber])
                        break
                    }
                }
            }
            if (positionsRight == genNumberString.length) userWon = true
            CompareResult(digitsRight, positionsRight)
        }
}

fun main() {
    print("How long should the number be in digits? (For the default of 4, just press enter) ")
    val gameApp = App()
    val lengthString = readln()

    if (lengthString == "") gameApp.playNumberGame()
    else gameApp.playNumberGame(lengthString.toInt())
}
